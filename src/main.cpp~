/*This source code copyrighted by Lazy Foo' Productions (2004-2012)
and may not be redistributed without written permission.*/
#include <boost/concept_check.hpp>
#include <SDL/SDL.h>
#include <SDL/SDL_opengl.h>
#include <SDL/SDL_image.h>

#include "/include/timer.hpp"
#include "xonix.h"




void render(int mouse_x,int mouse_y, int x, int y)
{
    //Clear color buffer
    glClear( GL_COLOR_BUFFER_BIT );
   
    GLuint texture=surfaceToTex( "seleccion.png", texture);

    //Render quad
    if( renderQuad == true )
    {

        glBegin(GL_LINES);
        glColor3f(1,1,1); // rojo
        //for(int i=0; i<2; i++){
        glVertex3f(100, 100, 0.0);
        glVertex3f(150, 200, 0.0);

        glEnd();
	//textura=convertImage("9.bmp",textura);
	

    // Bind the texture to which subsequent calls refer to
    glBindTexture( GL_TEXTURE_2D, texture );

    glBegin( GL_QUADS );
        // Top-left vertex (corner)
        glTexCoord2i( 0, 0 );
        glVertex3f( 100, 300, 0 );

        // Bottom-left vertex (corner)
        glTexCoord2i( 1, 0 );
        glVertex3f( 228, 300, 0 );

        // Bottom-right vertex (corner)
        glTexCoord2i( 1, 1 );
        glVertex3f( 228, 428, 0 );

        // Top-right vertex (corner)
        glTexCoord2i( 0, 1 );
        glVertex3f( 100, 428, 0 );
    glEnd();

    }
    //nueve= SDL_LoadBMP("9.bmp");
    
    
//     GLuint textura= load_image("9.bmp");
//     glBindTexture( GL_TEXTURE_2D, textura );
//     glBegin(GL_QUADS);
//     glVertex3f(10, nueve->h+10,0);
//     glVertex3f(nueve->w+10,10+nueve->h,0);
//     
//     glVertex3f(nueve->w+10, 10,0);
//     glVertex3f(10,10,0);
//     glEnd();
    //SDL_Flip(screen);

    //Update screen
    SDL_GL_SwapBuffers();
}











int main( int argc, char *argv[] )
{
    //Quit flag
    int mouse_x, mouse_y;

    bool quit = false;

    //Initialize
    if( init() == false )
    {
        return 1;
    }

    //The frame rate regulator
    Timer fps;
    int x = mouse_x, y = mouse_y;
    //SDL_Surface *nueve= SDL_LoadBMP("9.bmp");

    //Wait for user exit
    while( quit == false )
    {
        //Start the frame timer
        fps.start();

        //While there are events to handle
        while( SDL_PollEvent( &event ) )
        {
            SDL_GetMouseState(&mouse_x, &mouse_y);


            switch(event.type)
            {
            case SDL_QUIT:
                quit = true;
                break;

            case SDL_KEYDOWN:

                //SDL_GetMouseState( &x, &y );
                handleKeys( event.key.keysym.unicode);
                break;

//                if(event.button.button==LEFT_CLICK)
//                {
//
//                }

            }
        }

        

        //Run frame update
        update();

        //Render frame
        render(mouse_x,mouse_y,x,y);
        //SDL_Surface_to_glTextureObject()

        //SDL_GL_SwapBuffers();
        //Cap the frame rate
        if( fps.get_ticks() < 1000 / FRAMES_PER_SECOND )
        {
            SDL_Delay( ( 1000 / FRAMES_PER_SECOND ) - fps.get_ticks() );
        }
    }

    //Clean up
    clean_up();

    return 0;
}




GLuint convertImage(char file[], GLuint texture)
{
    SDL_Surface *surface;
    if ( (surface = IMG_Load(file)) ) {

        // Check that the image's width is a power of 2
        if ( (surface->w & (surface->w - 1)) != 0 ) {
            printf("warning: image.bmp's width is not a power of 2\n");
        }

        // Also check if the height is a power of 2
        if ( (surface->h & (surface->h - 1)) != 0 ) {
            printf("warning: image.bmp's height is not a power of 2\n");
        }

        // Have OpenGL generate a texture object handle for us
        glGenTextures( 1, &texture );

        // Bind the texture object
        glBindTexture( GL_TEXTURE_2D, texture );

        // Set the texture's stretching properties
        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
        glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );

        // Edit the texture object's image data using the information SDL_Surface gives us
        glTexImage2D( GL_TEXTURE_2D, 0, 3, surface->w, surface->h, 0,
                      GL_BGR, GL_UNSIGNED_BYTE, surface->pixels );
    }
    else {
        printf("SDL could not load image.bmp: %s\n", SDL_GetError());
        SDL_Quit();
        return 1;
    }

    // Free the SDL_Surface only if it was successfully created
    if ( surface ) {
        SDL_FreeSurface( surface );
    }

    return texture;
}
